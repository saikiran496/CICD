pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      // Use Windows named pipe for Docker Desktop
      args '--user root -v //./pipe/docker_engine://./pipe/docker_engine'
    }
  }
  environment {
    SONAR_URL = "http://localhost:9000" // SonarQube running locally
    DOCKER_IMAGE = "kiran496/sai496:${env.BUILD_NUMBER}"
  }
  stages {
    stage('Checkout Code') {
      steps {
        // Checkout the repository
        checkout scm
      }
    }
    stage('Build and Test') {
      steps {
        // Verify directory structure and run Maven build
        bat 'dir'
        bat '''
          cd java-maven-sonar-argocd-helm-k8s\\spring-boot-app
          mvn clean package
        '''
      }
    }
    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          bat '''
            cd java-maven-sonar-argocd-helm-k8s\\spring-boot-app
            mvn sonar:sonar -Dsonar.login=%SONAR_AUTH_TOKEN% -Dsonar.host.url=%SONAR_URL%
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      steps {
        script {
          // Build Docker image
          bat '''
            cd java-maven-sonar-argocd-helm-k8s\\spring-boot-app
            docker build -t %DOCKER_IMAGE% .
          '''
          // Push Docker image to registry
          def dockerImage = docker.image(env.DOCKER_IMAGE)
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            dockerImage.push()
          }
        }
      }
    }
  }
}
